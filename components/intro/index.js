import { useLayoutEffect, useMediaQuery } from '@studio-freight/hamo'
import clsx from 'clsx'
import gsap from 'gsap'
import { useStore } from 'lib/store'
import { useEffect, useState } from 'react'
import s from './intro.module.scss'

const DISPLAY = 'HOLA'
const DISPLAY2 = 'HELLO'
const DISPLAY3 = 'ALO'

export const Intro = () => {
  const isMobile = useMediaQuery('(max-width: 800px)')
  const [isLoaded, setIsLoaded] = useState(false)
  const [scroll, setScroll] = useState(false)
  const introOut = useStore(({ introOut }) => introOut)
  const setIntroOut = useStore(({ setIntroOut }) => setIntroOut)
  const lenis = useStore(({ lenis }) => lenis)

  const tl = gsap.timeline()
  useLayoutEffect(() => {
    tl.to(
      '.title',
      {
        duration: 0.2,
        opacity: 1,
        // stagger: 0.2,
        ease: 'Expo.easeOut',
      },
      0.2
    )
    .to(
      '.chas',
      {
        yPercent: 100,
        duration: 0.4,
        // opacity: 1,
        stagger: 0.03,
        ease: 'Expo.easeIn',
      },
      2
    )
  }, [])

  useEffect(() => {
    setTimeout(() => {
      setIsLoaded(true)
      // setIntroOut(true)
    }, 800)
  }, [])

  useEffect(() => {
    setTimeout(() => {
      // setIsLoaded(true)
      setIntroOut(true)
    }, 1000)
  }, [])

  useEffect(() => {
    if (isMobile) {
      document.documentElement.classList.toggle('intro', false)
      return
    }

    if (!scroll) {
      document.documentElement.classList.add('intro', true)
    }

    if (lenis) {
      // console.log(scroll)
      if (scroll) {
        lenis.start()
        document.documentElement.classList.toggle('intro', false)
      } else {
        setTimeout(() => {
          lenis.stop()
        }, 0)

        document.documentElement.classList.toggle('intro', true)
      }
    }
  }, [scroll, lenis, isMobile])

  return (
    <div
      className={clsx(s.wrapper, isLoaded && s.out)}
      onTransitionEnd={(e) => {
        e.target.classList.forEach((value) => {
          if (value.includes('out')) {
            setScroll(true)
          }
          if (value.includes('show')) {
            setIntroOut(true)
          }
        })
      }}
    >
      <div className={isLoaded && s.relative}>
        <div className={s.hero}>
          <div
            role="heading"
            aria-level={1}
            aria-label={DISPLAY}
            // ref={title}
            className={clsx('title', s.title)}
          >
            {DISPLAY.split('').map((ch, i) => {
              return (
                <span
                  // ref={cha}
                  className={clsx('chas', s.cha)}
                  aria-hidden="true"
                  key={i}
                >
                  {ch}
                </span>
              )
            })}
          </div>
          <div
            role="heading"
            aria-level={1}
            aria-label={DISPLAY2}
            // ref={title}
            className={clsx('title', s.title)}
          >
            {DISPLAY2.split('').map((ch, i) => {
              return (
                <span
                  // ref={cha}
                  className={clsx('chas', s.cha)}
                  aria-hidden="true"
                  key={i}
                >
                  {ch}
                </span>
              )
            })}
          </div>
          <div
            role="heading"
            aria-level={1}
            aria-label={DISPLAY3}
            // ref={title}
            className={clsx('title', s.title)}
          >
            {DISPLAY3.split('').map((ch, i) => {
              return (
                <span
                  // ref={cha}
                  className={clsx('chas', s.cha)}
                  aria-hidden="true"
                  key={i}
                >
                  {ch}
                </span>
              )
            })}
          </div>
        </div>
      </div>
    </div>
  )
}

// export const Title = ({ className }) => {
//   const introOut = useStore(({ introOut }) => introOut)

//   return (
//     <div className={className}>
//       <LNS fill={'var(--theme-primary)'} />
//       <EI
//         fill={'var(--theme-primary)'}
//         className={clsx(introOut && s.translate, s.mobile)}
//       />
//     </div>
//   )
// }

const LNS = ({ isLoaded, className, fill }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 1360 336"
      className={clsx(s.lns, className)}
    >
      <g fill={fill}>
        <path
          className={clsx(s.start, isLoaded && s.show)}
          style={{ '--index': 2 }}
          d="M873.916 269.237L873.201 268.522L870.512 271.221C859.917 281.815 841.608 275.733 839.735 260.868C839.357 257.811 839.172 254.733 839.181 251.653V0.352783H838.224V25.3891C838.224 26.0395 838.014 26.6722 837.625 27.1933C837.236 27.7145 836.689 28.0962 836.065 28.2817C835.442 28.4672 834.775 28.4466 834.165 28.2231C833.554 27.9995 833.032 27.5849 832.676 27.0408C829.024 21.4061 824.02 16.775 818.12 13.5699C812.22 10.3648 805.612 8.6877 798.898 8.69143H722.751L664.199 67.244C663.494 67.9465 662.597 68.4245 661.621 68.6176C660.644 68.8106 659.633 68.7101 658.713 68.3286C657.794 67.9472 657.009 67.3019 656.456 66.4743C655.904 65.6467 655.609 64.674 655.609 63.6789V0.352783H654.601V29.2664C654.602 29.9547 654.368 30.6227 653.938 31.1599C653.508 31.6971 652.907 32.0711 652.235 32.2203C651.563 32.3695 650.86 32.2848 650.243 31.9802C649.626 31.6756 649.131 31.1695 648.841 30.5454C640.784 13.2536 628.447 8.71159 628.447 8.71159L570.68 65.8038L571.395 66.5188L573.943 64.0011C584.538 53.5474 602.615 59.6001 604.629 74.354C605.06 77.6158 605.269 80.9032 605.254 84.1933V271.372L541.978 334.648L542.693 335.353L545.875 332.18C547.563 330.539 549.561 329.249 551.751 328.384C553.941 327.52 556.281 327.099 558.635 327.145H682.971L731.593 277.868L739.761 269.7L739.056 268.985L735.904 272.137C734.221 273.822 732.223 275.159 730.023 276.072C727.823 276.984 725.465 277.454 723.084 277.455H673.353C672.357 277.454 671.383 277.159 670.555 276.605C669.726 276.051 669.081 275.264 668.701 274.343C668.32 273.422 668.221 272.409 668.417 271.432C668.612 270.455 669.093 269.558 669.798 268.854L780.287 158.366C780.991 157.664 781.887 157.186 782.862 156.993C783.838 156.799 784.848 156.899 785.767 157.279C786.686 157.659 787.471 158.303 788.025 159.129C788.578 159.955 788.875 160.927 788.877 161.921V270.556C788.877 317.144 816.068 327.094 816.068 327.094L817.66 325.503L873.916 269.237ZM674.924 57.9081H727.827C728.824 57.9063 729.799 58.2007 730.629 58.7539C731.459 59.3071 732.106 60.0942 732.487 61.0155C732.869 61.9367 732.969 62.9505 732.774 63.9284C732.579 64.9064 732.098 65.8045 731.392 66.5087L664.199 133.742C663.495 134.448 662.597 134.929 661.619 135.124C660.641 135.32 659.627 135.22 658.706 134.838C657.784 134.456 656.997 133.809 656.444 132.98C655.891 132.15 655.596 131.174 655.598 130.177C655.598 111.234 655.598 77.2645 655.598 77.2645L674.924 57.9081ZM655.558 143.763L666.344 132.997V210.282L655.538 221.088L655.558 143.763ZM609.151 268.894L657.774 220.272C658.478 219.569 659.376 219.091 660.352 218.898C661.328 218.705 662.339 218.806 663.259 219.187C664.178 219.569 664.964 220.214 665.516 221.042C666.069 221.869 666.364 222.842 666.364 223.837V268.774C666.361 270.108 665.829 271.387 664.884 272.329L659.727 277.495H612.696C611.7 277.493 610.728 277.196 609.901 276.641C609.075 276.086 608.431 275.299 608.052 274.378C607.672 273.458 607.574 272.446 607.77 271.47C607.966 270.494 608.446 269.597 609.151 268.894V268.894ZM716.709 208.368V82.6424L741.443 57.9081H770.769C775.577 57.9081 780.188 59.818 783.588 63.2176C786.987 66.6172 788.897 71.2281 788.897 76.0359V148.426L725.36 211.963C724.656 212.689 723.751 213.186 722.762 213.391C721.772 213.595 720.744 213.497 719.811 213.109C718.878 212.721 718.083 212.062 717.53 211.216C716.976 210.371 716.691 209.378 716.709 208.368V208.368Z"
        />
        <path
          className={clsx(s.start, isLoaded && s.show)}
          style={{ '--index': 1 }}
          d="M312.612 124.618L159.947 277.283H129.301C128.305 277.283 127.331 276.987 126.502 276.433C125.674 275.879 125.029 275.092 124.648 274.171C124.268 273.251 124.169 272.238 124.364 271.261C124.559 270.284 125.04 269.386 125.746 268.683L168.89 225.509C172.283 222.109 174.188 217.502 174.187 212.698V84.7975C174.187 84.1351 174.318 83.4792 174.572 82.8674C174.826 82.2557 175.198 81.7 175.667 81.2324L198.982 57.9181C203.767 57.9527 208.344 59.8778 211.715 63.2737C215.087 66.6696 216.979 71.2607 216.979 76.0459V112.452C216.98 114.04 216.668 115.612 216.061 117.079C215.455 118.546 214.565 119.879 213.443 121.003L210.13 124.316L210.745 125.122L267.313 68.5833V0.392893H266.306V25.4193C266.302 26.0667 266.09 26.6958 265.702 27.2138C265.313 27.7317 264.768 28.1112 264.148 28.2962C263.527 28.4813 262.864 28.462 262.255 28.2414C261.646 28.0208 261.125 27.6104 260.767 27.0708C257.11 21.4418 252.105 16.8159 246.206 13.6131C240.307 10.4103 233.701 8.73232 226.989 8.73166H179.656L138.264 50.2743L122.15 66.3878C121.446 67.0904 120.549 67.5684 119.572 67.7614C118.596 67.9545 117.584 67.854 116.665 67.4725C115.746 67.0911 114.961 66.4458 114.408 65.6182C113.855 64.7906 113.56 63.8178 113.56 62.8227V0.382812H112.553V29.2663C112.554 29.9546 112.32 30.6226 111.889 31.1598C111.459 31.697 110.858 32.0711 110.186 32.2202C109.514 32.3694 108.812 32.2847 108.195 31.9801C107.577 31.6756 107.083 31.1694 106.792 30.5454C98.7355 13.2535 86.3986 8.7115 86.3986 8.7115L28.6417 65.8037L29.3469 66.5187L31.8946 64.001C42.5094 53.5373 60.5768 59.6201 62.581 74.3942C63.0117 77.6425 63.2202 80.9165 63.2052 84.1932V271.07L0 334.275L0.714997 334.99L3.19241 332.512C6.58217 329.113 11.1821 327.197 15.9827 327.185H198.72L298.301 226.999C301.698 223.601 303.607 218.994 303.609 214.189V142.413C303.61 137.609 305.519 133.001 308.916 129.603L313.196 125.323L312.612 124.618ZM113.671 129.1V76.3177L132.08 57.908H185.386C186.383 57.9062 187.358 58.2006 188.188 58.7538C189.018 59.307 189.665 60.0941 190.046 61.0154C190.428 61.9366 190.528 62.9504 190.333 63.9283C190.138 64.9063 189.657 65.8044 188.951 66.5087L122.251 133.209C121.547 133.915 120.649 134.396 119.671 134.591C118.693 134.786 117.679 134.686 116.758 134.304C115.837 133.922 115.049 133.275 114.496 132.446C113.943 131.616 113.649 130.641 113.651 129.643L113.671 129.1ZM113.671 143.199L123.862 132.997V210.483L113.651 220.695L113.671 143.199ZM115.685 277.253H70.6778C69.6806 277.255 68.7053 276.961 67.8756 276.407C67.0458 275.854 66.3991 275.067 66.0173 274.146C65.6354 273.225 65.5355 272.211 65.7306 271.233C65.9256 270.255 66.4068 269.357 67.1129 268.653L115.262 220.514C115.966 219.808 116.863 219.327 117.84 219.132C118.817 218.937 119.83 219.035 120.751 219.416C121.672 219.797 122.459 220.442 123.013 221.27C123.566 222.098 123.862 223.072 123.862 224.069V269.015L115.685 277.253ZM253.375 269.348C253.374 270.149 253.055 270.916 252.489 271.483L247.614 276.367C247.048 276.934 246.28 277.252 245.479 277.253H173.492C172.495 277.255 171.52 276.961 170.69 276.407C169.86 275.854 169.213 275.067 168.831 274.146C168.449 273.225 168.35 272.211 168.545 271.233C168.74 270.255 169.221 269.357 169.927 268.653L244.784 193.805C245.489 193.103 246.386 192.625 247.363 192.432C248.339 192.239 249.35 192.339 250.269 192.721C251.188 193.102 251.974 193.747 252.527 194.575C253.08 195.403 253.374 196.375 253.375 197.37V269.348Z"
        />
        <path
          className={clsx(s.start, isLoaded && s.show)}
          style={{ '--index': 3 }}
          d="M1324.15 128.415L1254.24 117.971C1253.31 117.832 1252.45 117.44 1251.74 116.839C1251.02 116.238 1250.49 115.451 1250.2 114.566C1249.91 113.68 1249.87 112.732 1250.09 111.825C1250.3 110.919 1250.77 110.09 1251.43 109.431L1360.1 0.71512L1359.39 0L1355.99 3.40398C1354.31 5.08717 1352.31 6.42226 1350.11 7.3329C1347.91 8.24355 1345.55 8.71194 1343.17 8.71139H1209.33L1101.85 116.188V123.943C1101.85 132.046 1104.76 139.878 1110.05 146.018C1115.34 152.157 1122.65 156.195 1130.66 157.399V157.399C1131.45 157.519 1132.18 157.854 1132.79 158.366C1133.39 158.878 1133.84 159.548 1134.09 160.301C1134.34 161.055 1134.37 161.861 1134.19 162.633C1134 163.404 1133.61 164.109 1133.05 164.67L1079.88 217.845L1080.59 218.56L1083.74 215.407C1085.08 214.07 1086.71 213.066 1088.51 212.475C1090.31 211.883 1092.22 211.722 1094.09 212.003L1179.59 224.884C1180.51 225.025 1181.37 225.418 1182.08 226.019C1182.79 226.621 1183.32 227.408 1183.62 228.293C1183.91 229.178 1183.94 230.126 1183.73 231.032C1183.51 231.938 1183.05 232.766 1182.39 233.424L1080.75 334.698L1081.47 335.413L1084.41 332.472C1087.81 329.091 1092.41 327.194 1097.2 327.195H1244.63C1244.89 327.194 1245.14 327.089 1245.33 326.903L1359.09 214.169V168.99C1359.09 159.163 1355.57 149.662 1349.15 142.215C1342.74 134.769 1333.87 129.872 1324.15 128.415V128.415ZM1243.12 116.33L1200.56 109.965C1199.63 109.827 1198.77 109.437 1198.06 108.836C1197.34 108.235 1196.81 107.448 1196.52 106.563C1196.23 105.677 1196.18 104.728 1196.4 103.821C1196.61 102.914 1197.08 102.084 1197.74 101.425L1241.43 57.7267L1289.66 57.6059C1290.66 57.6041 1291.63 57.8976 1292.46 58.4496C1293.29 59.0015 1293.94 59.787 1294.32 60.7066C1294.71 61.6261 1294.81 62.6385 1294.61 63.6157C1294.42 64.5929 1293.94 65.4909 1293.24 66.1963L1243.12 116.33ZM1164.37 104.557C1161.68 104.156 1159.22 102.802 1157.44 100.741C1155.66 98.6802 1154.69 96.0494 1154.68 93.3274V64.4239L1161.25 57.9381L1227.81 57.767C1228.81 57.7652 1229.78 58.0588 1230.61 58.6107C1231.44 59.1627 1232.08 59.948 1232.47 60.8676C1232.85 61.7872 1232.95 62.7996 1232.76 63.7768C1232.57 64.754 1232.09 65.6521 1231.38 66.3575L1189.44 108.303L1164.37 104.557ZM1132.26 166.916L1140.31 158.859L1230.63 172.435C1231.68 172.593 1232.67 173.041 1233.48 173.729C1234.3 174.416 1234.9 175.316 1235.24 176.328C1235.57 177.34 1235.61 178.424 1235.36 179.459C1235.12 180.495 1234.59 181.442 1233.83 182.193V182.193L1132.26 166.916ZM1190.67 226.576L1234.64 233.203C1235.56 233.343 1236.42 233.737 1237.13 234.34C1237.85 234.943 1238.38 235.732 1238.66 236.619C1238.95 237.505 1238.99 238.455 1238.77 239.361C1238.55 240.268 1238.09 241.096 1237.43 241.753L1201.51 277.374H1151.88C1150.89 277.376 1149.91 277.081 1149.08 276.526C1148.25 275.972 1147.6 275.183 1147.22 274.26C1146.84 273.337 1146.74 272.322 1146.94 271.343C1147.14 270.364 1147.62 269.466 1148.33 268.763L1190.67 226.576ZM1211.59 268.763L1282.95 197.723C1283.61 197.065 1284.07 196.237 1284.29 195.331C1284.5 194.425 1284.46 193.477 1284.17 192.592C1283.88 191.707 1283.35 190.92 1282.64 190.318C1281.93 189.716 1281.07 189.323 1280.15 189.183L1235.06 182.345L1242.78 174.65C1242.9 174.539 1243.03 174.455 1243.18 174.406C1243.33 174.357 1243.49 174.344 1243.65 174.368L1289.22 181.217C1292.76 181.749 1295.98 183.532 1298.32 186.241C1300.65 188.95 1301.93 192.406 1301.93 195.981V268.753L1293.27 277.334H1215.18C1214.19 277.329 1213.22 277.032 1212.39 276.477C1211.57 275.923 1210.93 275.137 1210.55 274.219C1210.17 273.301 1210.07 272.291 1210.26 271.316C1210.46 270.342 1210.93 269.447 1211.64 268.743L1211.59 268.763Z"
        />
      </g>
    </svg>
  )
}

const EI = ({ isLoaded, className, fill }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 1360 336"
      className={clsx(s.ei, className)}
    >
      <g fill={fill}>
        <path
          style={{ '--index': 5 }}
          className={clsx(s.start, isLoaded && s.show)}
          d="M1113.42 269.237L1112.71 268.522L1109.08 272.147C1105.68 275.544 1101.08 277.453 1096.27 277.455H1001.08C1000.09 277.454 999.114 277.159 998.286 276.607C997.459 276.054 996.813 275.268 996.432 274.349C996.051 273.43 995.95 272.419 996.143 271.442C996.336 270.466 996.814 269.569 997.517 268.864L1058.43 207.955L1057.72 207.24L1050.55 214.411C1050.13 214.833 1049.59 215.12 1049 215.236C1048.42 215.353 1047.81 215.293 1047.26 215.064C1046.71 214.836 1046.24 214.449 1045.9 213.953C1045.57 213.456 1045.39 212.873 1045.39 212.275V64.0312L1051.8 57.616H1087.5V57.5556L1144.08 0.977083L1143.36 0.261963L1140.23 3.40409C1138.55 5.08727 1136.55 6.42236 1134.35 7.33301C1132.15 8.24366 1129.79 8.71205 1127.41 8.7115H927.413L870.311 65.8339L871.026 66.549L874.49 63.1349C877.874 59.7945 882.434 57.9174 887.189 57.908L977.113 57.757C978.109 57.7553 979.083 58.0488 979.912 58.6008C980.741 59.1527 981.388 59.9382 981.771 60.8577C982.154 61.7773 982.255 62.7896 982.062 63.7668C981.869 64.744 981.391 65.6421 980.688 66.3475L920.605 126.431L921.32 127.146L928.43 120.026C928.853 119.603 929.392 119.315 929.979 119.199C930.566 119.083 931.174 119.144 931.726 119.374C932.278 119.604 932.749 119.992 933.08 120.49C933.412 120.988 933.588 121.573 933.586 122.171V270.073L926.194 277.455H895.438L837.58 334.698L838.295 335.413L841.316 332.392C844.701 329.045 849.266 327.164 854.026 327.155H1055.98L1113.42 269.237ZM990.729 57.747L1038.15 57.6663C1039.15 57.6665 1040.12 57.9616 1040.95 58.5143C1041.78 59.067 1042.42 59.8525 1042.8 60.7717C1043.18 61.6908 1043.28 62.7024 1043.09 63.6786C1042.9 64.6549 1042.42 65.5521 1041.72 66.2569L992.531 115.453C991.827 116.159 990.929 116.641 989.951 116.836C988.973 117.031 987.959 116.931 987.038 116.549C986.117 116.167 985.33 115.52 984.777 114.691C984.223 113.861 983.929 112.886 983.931 111.888V64.5549L990.729 57.747ZM983.931 125.464L995.009 114.386V208.67L983.931 219.748V125.464ZM986.449 218.701C987.152 217.995 988.049 217.514 989.026 217.319C990.003 217.124 991.017 217.223 991.937 217.603C992.858 217.984 993.645 218.629 994.199 219.457C994.753 220.285 995.049 221.259 995.049 222.256V269.922L987.496 277.475H939.81C938.815 277.475 937.842 277.179 937.015 276.627C936.187 276.074 935.542 275.289 935.161 274.369C934.779 273.45 934.678 272.439 934.871 271.462C935.064 270.486 935.542 269.589 936.245 268.884L986.449 218.701Z"
        />
        <path
          className={clsx(s.start, isLoaded && s.show)}
          style={{ '--index': 4 }}
          d="M563.56 268.774L562.845 268.058L558.877 272.036C557.193 273.72 555.194 275.055 552.994 275.965C550.795 276.876 548.437 277.344 546.056 277.344H439.818C438.824 277.342 437.853 277.045 437.026 276.492C436.2 275.938 435.557 275.153 435.177 274.234C434.796 273.315 434.696 272.304 434.89 271.329C435.083 270.354 435.561 269.458 436.263 268.753L571.626 133.38L570.921 132.665L566.148 137.428C564.454 139.122 562.44 140.463 560.225 141.374C558.009 142.285 555.636 142.747 553.24 142.735C550.845 142.723 548.475 142.236 546.269 141.303C544.062 140.369 542.063 139.008 540.386 137.297L507.525 103.791C506.602 102.85 506.086 101.585 506.086 100.267C506.086 98.9485 506.602 97.683 507.525 96.7417L603.199 1.06778L602.484 0.352783L599.332 3.51507C597.647 5.19946 595.646 6.53515 593.445 7.44584C591.243 8.35652 588.884 8.82423 586.501 8.82236H448.046L398.809 58.0592L390.42 66.4483C389.716 67.1537 388.819 67.6346 387.842 67.8299C386.865 68.0253 385.852 67.9264 384.931 67.5458C384.011 67.1652 383.223 66.5199 382.669 65.6918C382.115 64.8636 381.82 63.8897 381.82 62.8933V0.453468H380.813V29.2664C380.809 29.9508 380.573 30.6136 380.143 31.1464C379.713 31.6791 379.115 32.0502 378.447 32.1988C377.779 32.3474 377.08 32.2647 376.465 31.9644C375.85 31.664 375.355 31.1637 375.062 30.5454C367.005 13.2536 354.658 8.71159 354.658 8.71159L296.901 65.8038L297.606 66.5188L300.164 64.0011C310.759 53.5474 328.826 59.6001 330.84 74.354C331.275 77.6156 331.487 80.9029 331.475 84.1933V271.271L268.26 334.486L268.975 335.191L271.946 332.22C275.339 328.828 279.938 326.92 284.735 326.913H505.199L563.56 268.774ZM499.619 203.967L426.242 277.344H397.188C396.193 277.342 395.222 277.045 394.396 276.492C393.57 275.938 392.926 275.153 392.546 274.234C392.166 273.315 392.066 272.304 392.259 271.329C392.453 270.354 392.931 269.458 393.633 268.753L437.321 225.066C439.006 223.379 440.342 221.377 441.253 219.174C442.164 216.971 442.631 214.609 442.628 212.225V161.629L453.706 150.551L499.639 196.877C500.572 197.823 501.092 199.098 501.089 200.426C501.085 201.754 500.557 203.027 499.619 203.967V203.967ZM442.608 148.104V81.313L466.124 57.7973L533.085 57.6262C534.083 57.6224 535.06 57.9153 535.891 58.4677C536.722 59.0201 537.371 59.8071 537.754 60.7288C538.137 61.6504 538.237 62.6652 538.043 63.6441C537.848 64.623 537.367 65.5219 536.66 66.2268L451.229 151.659C450.526 152.371 449.627 152.858 448.646 153.057C447.666 153.257 446.648 153.159 445.723 152.778C444.798 152.397 444.008 151.748 443.453 150.916C442.898 150.083 442.604 149.104 442.608 148.104V148.104ZM400.31 57.9686L452.477 57.8377C453.473 57.8359 454.447 58.1296 455.277 58.6815C456.106 59.2334 456.752 60.0188 457.135 60.9384C457.518 61.8579 457.619 62.8703 457.427 63.8475C457.234 64.8247 456.756 65.7228 456.053 66.4282L390.47 131.547C389.765 132.246 388.869 132.721 387.894 132.912C386.92 133.103 385.911 133.002 384.993 132.621C384.076 132.24 383.292 131.596 382.74 130.771C382.188 129.945 381.892 128.975 381.89 127.982V78.4629C381.893 77.1286 382.425 75.85 383.37 74.9079L400.31 57.9686ZM381.89 141.98L392.263 131.648V210.584L381.87 220.987L381.89 141.98ZM392.293 224.159V268.743L383.642 277.394H339.048C338.053 277.394 337.08 277.099 336.253 276.546C335.425 275.994 334.78 275.208 334.398 274.289C334.017 273.37 333.917 272.358 334.11 271.382C334.303 270.406 334.78 269.508 335.483 268.804L383.682 220.604C384.383 219.902 385.275 219.422 386.248 219.225C387.22 219.028 388.229 219.123 389.148 219.497C390.067 219.871 390.854 220.509 391.412 221.329C391.97 222.15 392.273 223.117 392.283 224.109L392.293 224.159Z"
        />
      </g>
    </svg>
  )
}
